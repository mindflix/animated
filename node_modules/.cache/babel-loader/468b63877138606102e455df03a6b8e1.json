{"ast":null,"code":"import _classCallCheck from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ShaderMaterial } from \"three\";\n\nvar RefractionMaterial =\n/*#__PURE__*/\nfunction (_ShaderMaterial) {\n  _inherits(RefractionMaterial, _ShaderMaterial);\n\n  function RefractionMaterial(options) {\n    _classCallCheck(this, RefractionMaterial);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(RefractionMaterial).call(this, {\n      vertexShader: \"varying vec3 worldNormal;\\n      varying vec3 viewDirection;\\n      void main() {\\n        vec4 transformedNormal = vec4(normal, 0.);\\n        vec4 transformedPosition = vec4(position, 1.0);\\n        #ifdef USE_INSTANCING\\n          transformedNormal = instanceMatrix * transformedNormal;\\n          transformedPosition = instanceMatrix * transformedPosition;\\n        #endif\\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\\n      }\",\n      fragmentShader: \"uniform sampler2D envMap;\\n      uniform sampler2D backfaceMap;\\n      uniform vec2 resolution;\\n      varying vec3 worldNormal;\\n      varying vec3 viewDirection;\\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\\n      }\\n      void main() {\\n        vec2 uv = gl_FragCoord.xy / resolution;\\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\\n      }\",\n      uniforms: {\n        envMap: {\n          value: options.envMap\n        },\n        backfaceMap: {\n          value: options.backfaceMap\n        },\n        resolution: {\n          value: options.resolution\n        }\n      }\n    }));\n  }\n\n  return RefractionMaterial;\n}(ShaderMaterial);\n\nexport { RefractionMaterial as default };","map":{"version":3,"sources":["/Users/yolo/Documents/dev/js/animated/src/diamonds/RefractionMaterial.js"],"names":["ShaderMaterial","RefractionMaterial","options","vertexShader","fragmentShader","uniforms","envMap","value","backfaceMap","resolution"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,OAA/B;;IAEqBC,kB;;;;;AACnB,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA,2FACb;AACJC,MAAAA,YAAY,ioBADR;AAcJC,MAAAA,cAAc,+vBAdV;AA6BJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEL,OAAO,CAACI;AAAjB,SADA;AAERE,QAAAA,WAAW,EAAE;AAAED,UAAAA,KAAK,EAAEL,OAAO,CAACM;AAAjB,SAFL;AAGRC,QAAAA,UAAU,EAAE;AAAEF,UAAAA,KAAK,EAAEL,OAAO,CAACO;AAAjB;AAHJ;AA7BN,KADa;AAoCpB;;;EArC6CT,c;;SAA3BC,kB","sourcesContent":["import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\n      }\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\n      }`,\n      uniforms: {\n        envMap: { value: options.envMap },\n        backfaceMap: { value: options.backfaceMap },\n        resolution: { value: options.resolution }\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}