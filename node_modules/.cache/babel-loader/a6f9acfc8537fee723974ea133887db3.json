{"ast":null,"code":"import _classCallCheck from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { ShaderMaterial, Color } from \"three\";\nimport { extend } from \"react-three-fiber\";\n\nvar CustomMaterial =\n/*#__PURE__*/\nfunction (_ShaderMaterial) {\n  _inherits(CustomMaterial, _ShaderMaterial);\n\n  function CustomMaterial() {\n    _classCallCheck(this, CustomMaterial);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CustomMaterial).call(this, {\n      vertexShader: \"uniform float scale;\\n      uniform float shift;\\n      varying vec2 vUv;\\n      void main() {\\n        vec3 pos = position;\\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 1.5) * 0.125);\\n        vUv = uv;\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\\n      }\",\n      fragmentShader: \"uniform sampler2D texture;\\n      uniform float hasTexture;\\n      uniform float shift;\\n      uniform float scale;\\n      uniform vec3 color;\\n      uniform float opacity;\\n      varying vec2 vUv;\\n      void main() {\\n        float angle = 1.55;\\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\\n        vec4 cr = texture2D(texture, p + offset);\\n        vec4 cga = texture2D(texture, p);\\n        vec4 cb = texture2D(texture, p - offset);\\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\\n        else gl_FragColor = vec4(color, opacity);\\n      }\",\n      uniforms: {\n        texture: {\n          value: null\n        },\n        hasTexture: {\n          value: 0\n        },\n        scale: {\n          value: 0\n        },\n        shift: {\n          value: 0\n        },\n        opacity: {\n          value: 1\n        },\n        color: {\n          value: new Color(\"white\")\n        }\n      }\n    }));\n  }\n\n  _createClass(CustomMaterial, [{\n    key: \"scale\",\n    set: function set(value) {\n      this.uniforms.scale.value = value;\n    },\n    get: function get() {\n      return this.uniforms.scale.value;\n    }\n  }, {\n    key: \"shift\",\n    set: function set(value) {\n      this.uniforms.shift.value = value;\n    },\n    get: function get() {\n      return this.uniforms.shift.value;\n    }\n  }, {\n    key: \"map\",\n    set: function set(value) {\n      this.uniforms.hasTexture.value = !!value;\n      this.uniforms.texture.value = value;\n    },\n    get: function get() {\n      return this.uniforms.texture.value;\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.uniforms.color.value;\n    }\n  }, {\n    key: \"opacity\",\n    get: function get() {\n      return this.uniforms.opacity.value;\n    },\n    set: function set(value) {\n      if (this.uniforms) this.uniforms.opacity.value = value;\n    }\n  }]);\n\n  return CustomMaterial;\n}(ShaderMaterial);\n\nextend({\n  CustomMaterial: CustomMaterial\n});","map":{"version":3,"sources":["/Users/yolo/Documents/dev/js/animated/src/components/CustomMaterial.js"],"names":["ShaderMaterial","Color","extend","CustomMaterial","vertexShader","fragmentShader","uniforms","texture","value","hasTexture","scale","shift","opacity","color"],"mappings":";;;;;AAAA,SAASA,cAAT,EAAyBC,KAAzB,QAAsC,OAAtC;AACA,SAASC,MAAT,QAAuB,mBAAvB;;IAEMC,c;;;;;AACJ,4BAAc;AAAA;;AAAA,uFACN;AACJC,MAAAA,YAAY,wUADR;AAUJC,MAAAA,cAAc,qqBAVV;AA2BJC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SADD;AAERC,QAAAA,UAAU,EAAE;AAAED,UAAAA,KAAK,EAAE;AAAT,SAFJ;AAGRE,QAAAA,KAAK,EAAE;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAHC;AAIRG,QAAAA,KAAK,EAAE;AAAEH,UAAAA,KAAK,EAAE;AAAT,SAJC;AAKRI,QAAAA,OAAO,EAAE;AAAEJ,UAAAA,KAAK,EAAE;AAAT,SALD;AAMRK,QAAAA,KAAK,EAAE;AAAEL,UAAAA,KAAK,EAAE,IAAIP,KAAJ,CAAU,OAAV;AAAT;AANC;AA3BN,KADM;AAqCb;;;;sBAESO,K,EAAO;AACf,WAAKF,QAAL,CAAcI,KAAd,CAAoBF,KAApB,GAA4BA,KAA5B;AACD,K;wBAEW;AACV,aAAO,KAAKF,QAAL,CAAcI,KAAd,CAAoBF,KAA3B;AACD;;;sBAESA,K,EAAO;AACf,WAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAApB,GAA4BA,KAA5B;AACD,K;wBAEW;AACV,aAAO,KAAKF,QAAL,CAAcK,KAAd,CAAoBH,KAA3B;AACD;;;sBAEOA,K,EAAO;AACb,WAAKF,QAAL,CAAcG,UAAd,CAAyBD,KAAzB,GAAiC,CAAC,CAACA,KAAnC;AACA,WAAKF,QAAL,CAAcC,OAAd,CAAsBC,KAAtB,GAA8BA,KAA9B;AACD,K;wBAES;AACR,aAAO,KAAKF,QAAL,CAAcC,OAAd,CAAsBC,KAA7B;AACD;;;wBAEW;AACV,aAAO,KAAKF,QAAL,CAAcO,KAAd,CAAoBL,KAA3B;AACD;;;wBAEa;AACZ,aAAO,KAAKF,QAAL,CAAcM,OAAd,CAAsBJ,KAA7B;AACD,K;sBAEWA,K,EAAO;AACjB,UAAI,KAAKF,QAAT,EAAmB,KAAKA,QAAL,CAAcM,OAAd,CAAsBJ,KAAtB,GAA8BA,KAA9B;AACpB;;;;EA3E0BR,c;;AA8E7BE,MAAM,CAAC;AAAEC,EAAAA,cAAc,EAAdA;AAAF,CAAD,CAAN","sourcesContent":["import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"react-three-fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 1.5) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D texture;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(texture, p + offset);\n        vec4 cga = texture2D(texture, p);\n        vec4 cb = texture2D(texture, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        texture: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.texture.value = value\n  }\n\n  get map() {\n    return this.uniforms.texture.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n"]},"metadata":{},"sourceType":"module"}