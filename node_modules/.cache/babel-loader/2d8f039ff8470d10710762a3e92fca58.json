{"ast":null,"code":"import _objectWithoutProperties from \"/Users/yolo/Documents/dev/js/animated/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/yolo/Documents/dev/js/animated/src/components/Text.js\";\nimport { FontLoader, Vector3, TextBufferGeometry } from \"three\";\nimport React, { useCallback, useRef } from \"react\";\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport usePromise from \"react-promise-suspense\";\nimport lerp from \"lerp\";\nimport state from \"../store\";\n\nfunction Text(_ref) {\n  var children = _ref.children,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 1 : _ref$size,\n      left = _ref.left,\n      right = _ref.right,\n      top = _ref.top,\n      bottom = _ref.bottom,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"white\" : _ref$color,\n      _ref$opacity = _ref.opacity,\n      opacity = _ref$opacity === void 0 ? 1 : _ref$opacity,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 0.01 : _ref$height,\n      _ref$layers = _ref.layers,\n      layers = _ref$layers === void 0 ? 0 : _ref$layers,\n      _ref$font = _ref.font,\n      font = _ref$font === void 0 ? \"/Inter_Black.json\" : _ref$font,\n      props = _objectWithoutProperties(_ref, [\"children\", \"size\", \"left\", \"right\", \"top\", \"bottom\", \"color\", \"opacity\", \"height\", \"layers\", \"font\"]);\n\n  var data = useLoader(FontLoader, font);\n  var geom = usePromise(function () {\n    return new Promise(function (res) {\n      return res(new TextBufferGeometry(children, {\n        font: data,\n        size: 1.5,\n        height: height,\n        curveSegments: 32\n      }));\n    });\n  }, [children]);\n  var onUpdate = useCallback(function (self) {\n    var box = new Vector3();\n    self.geometry.computeBoundingBox();\n    self.geometry.boundingBox.getSize(box);\n    self.position.x = left ? 0 : right ? -box.x : -box.x / 2;\n    self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2;\n  }, [left, right, top, bottom]);\n  var ref = useRef();\n  var last = state.top.current;\n  useFrame(function () {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1);\n    last = state.top.current;\n  });\n  return React.createElement(\"group\", Object.assign({}, props, {\n    scale: [size, size, 0.1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"mesh\", {\n    geometry: geom,\n    onUpdate: onUpdate,\n    frustumCulled: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"customMaterial\", {\n    ref: ref,\n    attach: \"material\",\n    color: color,\n    transparent: true,\n    opacity: opacity,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })));\n}\n\nvar MultilineText = function MultilineText(_ref2) {\n  var text = _ref2.text,\n      _ref2$size = _ref2.size,\n      size = _ref2$size === void 0 ? 1 : _ref2$size,\n      _ref2$lineHeight = _ref2.lineHeight,\n      lineHeight = _ref2$lineHeight === void 0 ? 1 : _ref2$lineHeight,\n      _ref2$position = _ref2.position,\n      position = _ref2$position === void 0 ? [0, 0, 0] : _ref2$position,\n      props = _objectWithoutProperties(_ref2, [\"text\", \"size\", \"lineHeight\", \"position\"]);\n\n  return text.split(\"\\n\").map(function (text, index) {\n    return React.createElement(Text, Object.assign({\n      key: index,\n      size: size\n    }, props, {\n      position: [position[0], position[1] - index * lineHeight, position[2]],\n      children: text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  });\n};\n\nexport { Text, MultilineText };","map":{"version":3,"sources":["/Users/yolo/Documents/dev/js/animated/src/components/Text.js"],"names":["FontLoader","Vector3","TextBufferGeometry","React","useCallback","useRef","useLoader","useFrame","usePromise","lerp","state","Text","children","size","left","right","top","bottom","color","opacity","height","layers","font","props","data","geom","Promise","res","curveSegments","onUpdate","self","box","geometry","computeBoundingBox","boundingBox","getSize","position","x","y","ref","last","current","shift","MultilineText","text","lineHeight","split","map","index"],"mappings":"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","sourcesContent":["import { FontLoader, Vector3, TextBufferGeometry } from \"three\";\nimport React, { useCallback, useRef } from \"react\";\nimport { useLoader, useFrame } from \"react-three-fiber\";\nimport usePromise from \"react-promise-suspense\";\nimport lerp from \"lerp\";\nimport state from \"../store\";\n\nfunction Text({\n  children,\n  size = 1,\n  left,\n  right,\n  top,\n  bottom,\n  color = \"white\",\n  opacity = 1,\n  height = 0.01,\n  layers = 0,\n  font = \"/Inter_Black.json\",\n  ...props\n}) {\n  const data = useLoader(FontLoader, font);\n  const geom = usePromise(\n    () =>\n      new Promise((res) =>\n        res(\n          new TextBufferGeometry(children, {\n            font: data,\n            size: 1.5,\n            height,\n            curveSegments: 32,\n          })\n        )\n      ),\n    [children]\n  );\n  const onUpdate = useCallback(\n    (self) => {\n      const box = new Vector3();\n      self.geometry.computeBoundingBox();\n      self.geometry.boundingBox.getSize(box);\n      self.position.x = left ? 0 : right ? -box.x : -box.x / 2;\n      self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2;\n    },\n    [left, right, top, bottom]\n  );\n\n  const ref = useRef();\n  let last = state.top.current;\n  useFrame(() => {\n    ref.current.shift = lerp(\n      ref.current.shift,\n      (state.top.current - last) / 100,\n      0.1\n    );\n    last = state.top.current;\n  });\n\n  return (\n    <group {...props} scale={[size, size, 0.1]}>\n      <mesh geometry={geom} onUpdate={onUpdate} frustumCulled={false}>\n        <customMaterial\n          ref={ref}\n          attach=\"material\"\n          color={color}\n          transparent\n          opacity={opacity}\n        />\n      </mesh>\n    </group>\n  );\n}\n\nconst MultilineText = ({\n  text,\n  size = 1,\n  lineHeight = 1,\n  position = [0, 0, 0],\n  ...props\n}) =>\n  text\n    .split(\"\\n\")\n    .map((text, index) => (\n      <Text\n        key={index}\n        size={size}\n        {...props}\n        position={[position[0], position[1] - index * lineHeight, position[2]]}\n        children={text}\n      />\n    ));\n\nexport { Text, MultilineText };\n"]},"metadata":{},"sourceType":"module"}